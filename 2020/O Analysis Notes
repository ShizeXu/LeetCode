1. There are two key attributes that a problem must have in order for dynamic programming to be applicable: optimal substructure and overlapping sub-problems. 
   If a problem can be solved by combining optimal solutions to non-overlapping sub-problems, the strategy is called "divide and conquer" instead.

2. Build Max/Min heap
    a. Bottom-up, O(N)
    b. Top-down, O(NlogN)

3. Heap (priority_queue) vs. BST (set/multiset)
   Heap just guarantees that elements on higher levels are greater (for max-heap) or smaller (for min-heap) than elements on lower levels, whereas BST guarantees order (from "left" to "right"). 
   If you want sorted elements, go with BST. Heap is better at findMin/findMax ( O(1) ), while BST is good at all finds ( O(logN) )

4. Quick Select
   Would be useful to find the Kth element or median. Average O(n).
   C = n + n/2 + n/4 + n/8 + ... = O(n).

5. Binary Indexed Tree
   Improve the complexity of acumulative sum from O(N) to O(logN). The idea is motivated by any number can be represented in sum of powers of 2.
   So we can store sums in separate portions, e.g. for sum(0-11) = sum(0-8) + sum(9-10) + sum(11).
      To Sum from a node to root - flip the right most bit ("i & -i" only keeps the right most '1'):
         i -= i & (-i);
      To Update all containing nodes - add the right most bit:
         i += i & (-i);
            0
    /    /    \       \
   1    2      4       8
        |     /  \    /  \
        3    5    6  9    10
                  |       |
                  7       11
